#    FrequentWords(Text, k)
#        FrequentPatterns ← an empty set
#        for i ← 0 to |Text| − k
#            Pattern ← the k-mer Text(i, k)
#            Count(i) ← PatternCount(Text, Pattern)
#        maxCount ← maximum value in array Count
#        for i ← 0 to |Text| − k
#            if Count(i) = maxCount
#                add Text(i, k) to FrequentPatterns
#        remove duplicates from FrequentPatterns
#        return FrequentPatterns

import sys

count = 0
max =0
index = -1
haystack = "AATTGAAGACAGTATGGAAGACACAAGGAAGACAGTTGAAGACAGTCGTGTAGAAGACATCGGAAGACAGCGAAGACAGAAGACACGGAAGACAGAAGACAGAAGACAGCTCACAAAGATGAATGAAGACACGTGAAGACAATGATTTGAAGACACGAAGACATCGACCAAGGAAGACATGGAAGACATCAGGGAGCCGAAGACATAGGGAAGACAGAAGACACGTTGAAGACAGTGTATGAAGACATTAGAAGACATGGTGAAGACAGGAGAAGACAGAAGACAAAAAGAAGACAGGAAGACAGAAGACAGAAGACAATGTGAAGACAGAAGGAAGACACGAAGACATGAAGACACGAAGACAGAAGACAGAAGACAAGGAAGACAAAGGAAGACATGAAGACAAATTGAAGACACCGAAGACACATATGAGAAGACAATGTGAAGACAAGAAGACATCGTAGAAGACAAGAAGACAGAAGACACGGTGGGGAAGACAAATCGGAAGACAGAAGACATGAAGACAGGAAGACAGTTACGAAGACACGTGGTTAGAAGACAAGTTGGAAGACAGGAAGACAGAAGACAGAAGACAAGCATCCTAAAGGGAAGACAGAAGACACTGAAGACACGAAGACAGAAGACACCGAAGACAATGAAGACAGAAGACACAGAAGACAGAAGACAAGTGGAAGACATCGAAGACATCGCCGAAGACATGAAGACACGTCAAGGAAGACAGACTATGAAGACATTGAAGACATCATGAAGACAGAAGACATAGAAGACACGCAGAAGACAGAAGACAGAAGACACATGAAGACAAGAAGACATCAGCAACTGGAAGACAGGAAGACAGGAAGACAGGAGGACACCGTGAAGACAGAAGACAGGAAGACAGTGTGGAAGACATGAAGACAGAAGACAATCAACCGGAAGAAGACAGGGAAGACATTCAGAAGACAGAAGACAGAAGACAAAGCGAAGACAACGAAGACATGAAGACAGAAGACAACGAAGACAGGAAGACATGAGAAGACAGCGAGAAGACAGGAAGACAAGGAAGACAAAGAAGACATGAAGACAGGTCCTGAAGACACAGTGGATTTTCGAAGACAGTCGAAGACAGCAAAATGAAGACATGAAGACATGAAGACAAGAAGACACCTGAAGACAGAAGACATCTCTCGTCATACCGAAGACAAGAAGACAGAAGACAGATCGCGAAGACAGAAGACATGAAGACACTGCGAAGACAGGTGAAGACACAGAAGACATCTGAACGAAGACATGAAGACATCTGAAGACATCGGAAGACAACTTACACTGAAGACAAGAAGACAAGAAGACAGAAGACATGCCCAGAAGACATGAAGACACCGAAGACACGTTGAAGACAGAAGACAGTTTTGAAGACATATCGCCCGAAGACAGAAGACAATACAGGAAGACAGAAGACAGAAGACAAGAATTTTCTTCGCTGCTCGTGAAGACAAGAAGACAGAAGACAGGACCCGGTAAGAAGACACGAAGACATAGAAGACAACTGAAGACACTGAGAAGACATGTCTAAGAGGAAGACAGCCTACCTGAAGACATGGAAGACACTGAAGACAGAAGACAAAGAAGACAGGCAAGGAAGACAGAAGACAAGAAGACATGATTCACGAAGACATCCTGAAGAAGACAGAAGACAGACGAAGACAGGAAGACACGCCACTGAAGACAACGAAGACAAGTGGAAGACAGAAATGAAGACACGAAGACAACGAAGACATGAAGACACGAAGACATGAAGACAGGTTATGAAGACAGGAAGACAACGCGGGGAAGACAAAGAAGACATAGGAAGACACTGAAGACAGAAGACACCGGAAGACAGAAGACACCGTGCATGAAGACACGAAGACAGGGAAGACAGAAGACAAGAAGACATGACACTGAAGACACTCCGGCGAAGACAGAAGACATTTAAGCGAAGACATATGAAGACATGAAGACATCCGAAGACAGGAGAAGACAGAAGACAGCGCTGTTATCGAAGACAGAAGACATGAAGACAGAAGACAAAGAAGACAGAAGACACCAGAAGACAGTAGAAGACAGAAGACAGGAAGACACGAAGACACCGAAGACAGAAGACACACCGAAGACAGAAGACAGAAGACAACACCCTGTGAAGACAGAAGACATCTCTTAGAAGACAGAAGACACTGGAAGACATACAGGTCGCCCTGAGGGAAGACACCGGAAGACAAGGTGAAGACAGAAGACAGGAAGACAGAAGACAGTGAAGACACGAAGACAACGAAGACAGAAGACAACTACTCGGAAGACATGAAGACAAAAGAAGACACCAGAAGACAAGCCACTGCTGCGGCGAAGACACGAAGACAGAAGACAGAGAAGACAGGAAGACAGGAAGACAAGAAGACATTACTGCAAAGAGAAGACACGAAGACAATGGCTGAGGCGAAGACAGAAGACAGAAGACACTTGGAAGACATGAAGACATACGGTTGAAGACAATGAAGACACAGACTTGAAGACAAGTAGAAGACAAGGAAGACACGAAGACACTTTGAGGAAGACAAGAAGACATCGGGAAGACAGAAGACAATTTGAAGACAGAAGACAGAAGACAGGAAGACATATGGAAGACAGAAGACACAGAAGACAAGAAGACATGAAGACAACTGAAGACACGAAGACAGAAGACAAGAAGACACTCGTTGAAGACAGAAGACATGGAAGACACTGAACCGAAGACATCAAGGAAGACATTAAGAAGAAGACAGAAGACAGAAGACAGAAGACAGAAGACAGAAGACAACAGAGAAGACATTGAAGAAGACATCGCTAATGTGAAGACAGAGAAGACAGAAGACATGGAAGACATTAGAAGACACGTGAAGACAATAGAAGACAGCGGACAAAAAACCATGCAATGAAGACATCGAAGACATAATTCCTGAAGACAGAAGACATACATTGGAAGACAGAGAAGACATCACCTAATAAGAGAGCCGAAGACAGAAGACAGAAGACAAGTTCGAAGACAGGAAGACAAGAAGACATTCATGAAGACAACGAAGACACGAAGACAACGAAGACAGGAGGGTATTGAAGACAGAAGACAACGGAAGACACATGAAGACAGAACTACCAGAAGACAAGGATGAAGACAAGAAGACAGGCCTCTGAAGACATCCTTCCGGAAGACAAAGAAGACACGAAGACACGGACCTTGGAGCACAGAAGACAACGAAGACAACAGGGAAGACACTCGAAGATGCGAAGACAGAAGACAGAAGACACGAAGACATCGAAGACAGGTGGTGAAGACAAGTGGCGCGAAGACAAGAGAAGACAATCGAAGACAGGAGAAGACACACCACGTCCACGAAGACATGGGGAAGACAGCGTTGAAGACAATCTCCCCTGAAGACAGAAGACAGGTGAAGACACGAAGACACGAAGACAGAAGACATGCTTTGCGAAGACACGAAGACAGAAGACATGGAAGACAGAAGACATGAAGACAGGATCGAAGACAGAAGACACTCTAGAAGACATACGCCGAAGACAAAGAAGACAGAAGACAAGAAGACAGAAGACACCCGAAGACACTGAAGACATAGCGAAGACAGAATGAAGACAGGAAGACAGGAAAGAAGACACGAAGACAAGAAGACAATCGAAGACAGAAGACAAAAAAGTTTGCGATGAAGACACTGCCGCATTGCGAAGACATAGAAGACACGCGTGGGAAGACACCGCTGAGAAGACACGAAGACAGGAAGACAAAGAAGACAATCCGAAGACATATGGAAGACAGAAGACAAGCCGGAAGACATGAAGACAGGAAGACATGGTGAAGACATACGAAGACAGAAGACACAACGAAGACAATTGCGAAGACAGAAGACAGGAAGACAGCGAAGACACGAAGACAGAAGACATGAAGACAACGAAGACAGGAAGACAAAGCGAAGACATGGAAGACACTGAAGACAGGAAGACACGGAAGACAGAATGAAGACAGAAGACATCCCTAGCGAAGACATGAAGACAGAAGACATTACTGAAGACAGAAGACACGAAGACGAAGACAAGAAGACAGAAGACAACAGAAGACAGTTGGAAGACATGGAAGACAAGAAGACAGAAGACAGGGCTAGAAGACAGAAGACAATGAAGACAGGGGACACGAAGACAGGAAGACATCATGAAGACATGAAGACAGGAAGACAGAAGACATGAAGACATCGAAGACACGAAGACAAGAAGACAGAAGACAAGACCATTGCGAAGACAGAAGACAGAAGACACGAAGACATGTAACGAAGACAAGGTCCGATTCACTGCGAAGACAGAAGACATGAAGACAGAGAAGACAGTAGAAGACACGAAGACATGAAGACATAGAAGACAAGATCGGAAGACACCGGAAGAAGACAAGAAGACAGGAAGACAAGGAAGACACAGGGAAGACAGAAGACAAGTATATTGAAGACACAGGAAGACAGATGAAGACAGAAGACACGCGAAGACATAATGAAGACAAGAAGACATTTTGGAGCGAAGACAGCGTCAATATCGAAGACAGAAGACAGGGAAGACAGTTAAGAAGACAGGAAGACAGCTCAAATCGTAGCCAGGAAGACAAGAAGACACAAGGAAGACATTGAAGACAGAAGACAGATAAATGAAGACAGAAGACACCTTCGGGAAGACAAGAAGACAGAAGACAGAAGACAGAAGACAGAAGACACTAGAAGACAAGTGCCCCAGAAGACAACTGAGAAGACAATGAAGACACCGGAAGACAGCAGAAGACAGGGAAGACAGCTGAAGACAGGGGGGAAGACAGATGAAGACAAGAAGACAAGGAAGACAAGTTAGAGAAGACAATATGCACACGAAGACATTGAAGACAGATGAAGACAATCGCCCGGAAGACAGAAGACAGCACAAAAGGTCGAAGACACGAAGACACGAAGACAACTGAAGACATAGGAAGACAGTAGGAAGACATGAAGACACTTGGACCAGGAAGACACTGAAGACAAGAAGACACATTGCTGAAGACATGAAGACAATCAGAAGACACGAAGACAGAAGACAAGAAGACATGTGAAGACACGAAGACACGGTATAGAAGACAAGTGGAAGACAAAGAAGACAGCGAAGACAGAAGACAGAAGACAGGGAAGACAGAAGACATCCTGAAGACAAGAAGACAGGAAGACAGAAGACAGAAGACAAAACGGAAGACAGCGAAGACATATCGAAGACAGATGGTGAAGACAGGCAGAGAAGACAGAAGACACGAAGACAGCGGGAAGACATTATATCTTTACGAGAAGACATGAAGACAGAATTGGAAGACAGAAGACAGAAGACAAGAAGACAGAAGACAGAAGACAGAAGACACTGAAGACACCTGAGTGCAGAAGACACGCATCGAAGACAGGAAGACAGTCTGAAGACAGAAGACAGAGGAAGACAAGAAGACAGTTCTGAAGACACGGGGGAACTTAGAAGACAATGTTGAAGACAGCGAAGACAGAAGACACCGAAGACAGAATGTTGGAAGACACGGAAGACATGAAGACAATAGAAGACAGAAGACAGAAGACAGGAAGACAGTGACGAAGACATGTGAAGACAGCGAAGACAGGAAGACAGAAGACATGAAGACATGGAATCACAGAAGACAAGAAGACACGGAAGACAGAAGACATCCTACTTTTGAAGACAAGAAGACAGCGAAGACAAGTGCATAGCGAAGACACGAAGACAGAAGACAGAAGACAGAAGACACATACGAAGACAAGAAGACAAGAAGACAGAAGACACCCCATGAAGACAGGAAGACAACTGGCGCGAAGACAAAGAAGACAGAAGACAGAAGACAGGAAGACAACTATAGTAGAAGACAGAAGACAGAAGACATGAAGACAGAAGACAGAAGACACGGTATTGAAGACAGTATTAGAAGACAATCCGAAGACAGAAGACAGAAGACAAGTCAGGAAGACAAATAGAAGACAGAAGACAAGTGAAGACAGGTGAAGACACGAAGACAGAAGACATCTATAGAAGACAATAGAGAAGACAGAAGACACGAAGACACTAAAGAAGACAGGAAGAAGACACGAAGACAGCCATGAAGACAAGTTGAAGACAGAAGACAACATGAAGACAGAAGACATGGGAGAAGACATCAGCGCGAAGACAGAAGACAGAAGACAGGAAGACATGAAGACATATGGCGAAGACACGAAGACAACGAAGACAGCCGCTAGCACTAACCCCTAGAAGACAGACCCGTGCGAGACGAAGACAGAAGACAATGAAGACACTGTTGAAGACACACATGAAGACAGGGAAGACAGAAGACACAGGAAGACATGAAGACAGCGAAGACAGGAGAAGACAGCTTTATGTCGAAGACATTGAAGACAGAAGACAGAAGACAGAAGACATCAGGAAGACATGAAGACAGCGAAGACAATGGAAGACATACGACGAAGACAAGGAAGACATGATTCCACAGGAAGACAGGAAGACAGAAACGAAGACAGAAGACATCACTCCTAACCGAAGACATTCGAAGACATAAGAAGACATAGACCATCCAATAAAGGAAGACACAGATATGCTTAACGAAGACACGTTGAAGACATGTGAAGACAAAGAAGACAGCTGAAGACACTGAAGACACGGCGAAGAAGACACATGAAGACATGGAAGACATCTCTGAAGACAAGAAGACAGTGAAGACATGGAAGACAAGGAAGACATGCGAAGACACTAGAAGACAGTTGAAGACATAGAAGACATGAAGACAGAAGACACTTCGCTAGGGCCCCCAGAAGACAGAAGACAAGAAGACAACCCGTCTAGAAGACAGAAGAGAAGACACAAGAAGACAGAAGACAGTTGAAGACAGAAGACAGAAGACAACTGAAGACAGAAGACATGAAGACATCGAAGACACCTAGAAGACAGAAGACAGCTTGAAGACAGAAGACATAGAAGACAGAAGACACGAAGACAGAAGACATCAGAAGACAAGAAGACATTTATAGAAGACACGAAGACACAATAGAAGACATGAAGACATAGGCGAAGACAGAAGACAGAAGACAGGAAGACACGAGGGAAGACACCACGAGAAGACACGAAGACAGAAGACATTGCGAAGACACAGGAAGACACGAAGACACATGCGTAGAAGACAGCGGCGGGAAGACAGGAAGACACGCGAAGACATGAAGACAGTTAAGAGGAAGACAGAAGACAGAAGACAGATGAAGACAATGCGAAGACATGCGTGAAGACAAGAAGACAGTGCAATGGAAGACAGAAGACAGTCGATTCCCTGAAGACAATATGAAGACAGAAGACAAGAAGACATCTCGGTTCCGGAAGACAGCCACCCAAGAAGACATGAAGACATCCGAAGACATGAAGACAATTTACGAAGACATCTTGAGAAGACAAGAAGACACCGGAAGACAGAAGACATATCGCCGAAGACAGCTGAAGACAAGACATGTCATAGAGATGCGAAGACATTGGAAGACAGGGCCGTTCCGAAGACATGAGGGAAGACACGAAGACAAAAGAAGACATGGAAGACAAAGGCCAGCTGAAGACAGGGAAGACACTGAAGACAGTTGTGGAAGACAGAAGACATGACGAAGACACAAGAAGACATGCTTGAAGACAGAAGACAATGAAGACAATAGGGAAGACAGGCGGAAGACACAGAAGACAAAGAAGACATCGAAGACAAGAAGACAACGAAGACAGAAGACAAGAAGACACGAAGACAGGAAGACAAACAGAAGACAAGGAAGACAGGGAAGACACTAGAAGACAATCGGCGGAAGACAGCGAAGACATGAAGACACGAAGACATTGAAGACATGAAGACAAAGAAGACAAGAAGACACCGAAGACAGAAGACAGAAGACACCGAAGACAGTACTAGAAGACATGGGAAGACATGTGAAGACAGAAGACATTCAGAGATGAAGACACCGAAGACAGAAGACAGCATAGAAGACAGCGAAGACAGAAGACAGTGATTGGAAGACAAAGAGGAAGACAAAACGAAGACAGAAGACAGAAGACAATGAAGACATAAAGAAGACAATAATCT"
needle ="GAAGACAGA"
x = 0

while x < len(haystack)-1:
	index = haystack.find(needle, x)
	if index != -1:
		print (index, end=' ')
		count += 1
		x = index + 1
	else:
		x = len(haystack)
if max == count:
  print(needle)
if count > max:
  max = count
  print("New max ",count, " ", needle)	
	
	  
		
